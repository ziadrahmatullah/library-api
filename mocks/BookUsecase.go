// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	entity "git.garena.com/sea-labs-id/bootcamp/batch-02/shared-projects/library-api/entity"
	mock "github.com/stretchr/testify/mock"

	valueobject "git.garena.com/sea-labs-id/bootcamp/batch-02/shared-projects/library-api/valueobject"
)

// BookUsecase is an autogenerated mock type for the BookUsecase type
type BookUsecase struct {
	mock.Mock
}

// AddBook provides a mock function with given fields: book
func (_m *BookUsecase) AddBook(book *entity.Book) (*entity.Book, error) {
	ret := _m.Called(book)

	var r0 *entity.Book
	if rf, ok := ret.Get(0).(func(*entity.Book) *entity.Book); ok {
		r0 = rf(book)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Book)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*entity.Book) error); ok {
		r1 = rf(book)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllBooks provides a mock function with given fields: clause, conditions
func (_m *BookUsecase) GetAllBooks(clause valueobject.Clause, conditions []valueobject.Condition) []*entity.Book {
	ret := _m.Called(clause, conditions)

	var r0 []*entity.Book
	if rf, ok := ret.Get(0).(func(valueobject.Clause, []valueobject.Condition) []*entity.Book); ok {
		r0 = rf(clause, conditions)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Book)
		}
	}

	return r0
}

// GetSingleBook provides a mock function with given fields: conditions
func (_m *BookUsecase) GetSingleBook(conditions []valueobject.Condition) *entity.Book {
	ret := _m.Called(conditions)

	var r0 *entity.Book
	if rf, ok := ret.Get(0).(func([]valueobject.Condition) *entity.Book); ok {
		r0 = rf(conditions)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Book)
		}
	}

	return r0
}

type mockConstructorTestingTNewBookUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewBookUsecase creates a new instance of BookUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBookUsecase(t mockConstructorTestingTNewBookUsecase) *BookUsecase {
	mock := &BookUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
