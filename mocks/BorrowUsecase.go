// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	models "git.garena.com/sea-labs-id/bootcamp/batch-02/shared-projects/library-api/-/tree/ziad-rahmatullah/models"
	mock "github.com/stretchr/testify/mock"
)

// BorrowUsecase is an autogenerated mock type for the BorrowUsecase type
type BorrowUsecase struct {
	mock.Mock
}

// BorrowBook provides a mock function with given fields: _a0, _a1
func (_m *BorrowUsecase) BorrowBook(_a0 context.Context, _a1 models.BorrowBook) (*models.BorrowBook, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *models.BorrowBook
	if rf, ok := ret.Get(0).(func(context.Context, models.BorrowBook) *models.BorrowBook); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.BorrowBook)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, models.BorrowBook) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllRecords provides a mock function with given fields: _a0
func (_m *BorrowUsecase) GetAllRecords(_a0 context.Context) ([]models.BorrowBook, error) {
	ret := _m.Called(_a0)

	var r0 []models.BorrowBook
	if rf, ok := ret.Get(0).(func(context.Context) []models.BorrowBook); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.BorrowBook)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReturnBook provides a mock function with given fields: _a0, _a1
func (_m *BorrowUsecase) ReturnBook(_a0 context.Context, _a1 models.BorrowBook) (*models.BorrowBook, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *models.BorrowBook
	if rf, ok := ret.Get(0).(func(context.Context, models.BorrowBook) *models.BorrowBook); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.BorrowBook)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, models.BorrowBook) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewBorrowUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewBorrowUsecase creates a new instance of BorrowUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBorrowUsecase(t mockConstructorTestingTNewBorrowUsecase) *BorrowUsecase {
	mock := &BorrowUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
