// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	appjwt "git.garena.com/sea-labs-id/bootcamp/batch-02/shared-projects/library-api/appjwt"
	entity "git.garena.com/sea-labs-id/bootcamp/batch-02/shared-projects/library-api/entity"

	mock "github.com/stretchr/testify/mock"
)

// Jwt is an autogenerated mock type for the Jwt type
type Jwt struct {
	mock.Mock
}

// GenerateToken provides a mock function with given fields: user
func (_m *Jwt) GenerateToken(user *entity.User) (string, error) {
	ret := _m.Called(user)

	var r0 string
	if rf, ok := ret.Get(0).(func(*entity.User) string); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*entity.User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidateToken provides a mock function with given fields: tokenString
func (_m *Jwt) ValidateToken(tokenString string) (*appjwt.CustomClaims, error) {
	ret := _m.Called(tokenString)

	var r0 *appjwt.CustomClaims
	if rf, ok := ret.Get(0).(func(string) *appjwt.CustomClaims); ok {
		r0 = rf(tokenString)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appjwt.CustomClaims)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(tokenString)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewJwt interface {
	mock.TestingT
	Cleanup(func())
}

// NewJwt creates a new instance of Jwt. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewJwt(t mockConstructorTestingTNewJwt) *Jwt {
	mock := &Jwt{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
